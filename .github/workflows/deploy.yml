name: Deploy
on:
  push:
    branches:
      - main
jobs:
  build_golang:
    name: "Build üì¶Ô∏è"
    runs-on: ubuntu-latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3
      - name: Set up Golang environment
        uses: actions/setup-go@v4
      - name: Compile Golang
        run: go build main.go
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: terraform-id-bot
          path: main
          if-no-files-found: error
  deploy_lambda:
    name: "Deploy üöÄ"
    needs: build_golang
    runs-on: ubuntu-latest
    environment:
      name: telegram
      url: https://t.me/lambdaidbot
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: terraform-id-bot
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Init Terraform
        run: terraform -chdir=tf init
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_VAR_telegram_api_token: ${{ secrets.TELEGRAM_API_TOKEN }}
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Validate Terraform plan
        run: terraform -chdir=tf validate
      - name: Apply Terraform plan
        run: terraform -chdir=tf apply -auto-approve
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_VAR_telegram_api_token: ${{ secrets.TELEGRAM_API_TOKEN }}
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
